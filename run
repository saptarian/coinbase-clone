#!/usr/bin/env bash

set -o errexit
set -o pipefail

DC="${DC:-exec}"

# If we're running in CI we need to disable TTY allocation for docker compose
# commands that enable it by default, such as exec and run.
TTY=""
if [[ ! -t 1 ]]; then
  TTY="-T"
fi

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

function _dc {
  docker compose "${DC}" ${TTY} "${@}"
}

# -----------------------------------------------------------------------------

function reup {
  docker compose down "${@}"
  docker compose up -d "${@}"
  docker compose logs -f
}

function rebuild {
  docker compose down "${@}"
  docker compose up -d --build "${@}"
  docker compose logs -f
}

function cmd {
  # Run any command you want in the backend container
  _dc backend "${@}"
}

function flask {
  # Run any Flask commands
  cmd flask "${@}"
}

function shell {
  # Start a shell session in the backend container
  cmd bash "${@}"
}

function psql {
  # Connect to PostgreSQL
  # shellcheck disable=SC1091
  . .env
 _dc postgres psql -U "${POSTGRES_USER}" "${@}"
}

function db_init {
  cmd rm -rf migrations
  flask db init
  flask db migrate
  flask db upgrade
}

function db_generate {
  python3 script/assets_seed_generator.py
}

function db_seed {
  docker compose exec -T postgres psql -U "coinbase" -d "coinbase" < "assets_seed.sql"
}

function sql {
  docker compose exec -T postgres psql -U "coinbase" -d "coinbase" -c "${@}"
}

function stats {
  docker compose stats
}

function logs {
  docker compose logs -f
}

function redis-cli {
  # Connect to Redis
  _dc redis redis-cli "${@}"
}

function pip3:outdated {
  # List any installed packages that are outdated
  cmd pip3 list --outdated
}

function clean {
  # Remove cache and other machine generates files
  rm -rf .pytest_cache/ .coverage celerybeat-schedule

  touch public/.keep
}

APP="${TARGET_APP:-flask-app}"

function putenv {
  docker compose exec -it consul consul kv put "${APP}"/"${@}"
}

function getenv {
  docker compose exec -it consul consul kv get -recurse "${APP}"
}

function fe:build {
  docker build -t frontend:latest ./frontend
}

function fe:run {
  docker run -itd --rm --name frontend -p 8080:8080 frontend:latest
}

function fe:stop {
  docker stop frontend
}

function help {
  printf "%s <task> [args]\n\nTasks:\n" "${0}"

  compgen -A function | grep -v "^_" | cat -n

  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

# This idea is heavily inspired by: https://github.com/adriancooney/Taskfile
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"

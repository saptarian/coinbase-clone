x-app: &default-app
  build:
    context: "."
    target: "app"
    args:
      - "UID=${UID:-1000}"
      - "GID=${GID:-1000}"
  depends_on:
    redis:
      condition: "service_started"
      required: false
    postgres:
      condition: "service_started"
      required: false
    consul:
      condition: "service_started"
      required: false
  env_file:
    - ".env"
  restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  stop_grace_period: "3s"
  tty: true
  volumes:
    - "${DOCKER_BACKEND_VOLUME:-mediafiles:/app/app/uploads}"

services:
  nginx:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_NGINX_CPUS:-0}"
          memory: "${DOCKER_NGINX_MEMORY:-0}"
    build: 
      context: "."
      target: "nginx"
    ports:
      - "${DOCKER_WEB_PORT_FORWARD:-0.0.0.0:80}:80"
    depends_on:
      - "backend"
    profiles: ["nginx"]
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"

  postgres:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_POSTGRES_CPUS:-0}"
          memory: "${DOCKER_POSTGRES_MEMORY:-0}"
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      # POSTGRES_DB: "${POSTGRES_DB}"
    image: "postgres:16.1-alpine"
    profiles: ["postgres"]
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    volumes:
      - "postgres:/var/lib/postgresql/data"

  redis:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_REDIS_CPUS:-0}"
          memory: "${DOCKER_REDIS_MEMORY:-0}"
    image: "redis:7.2.4-bookworm"
    profiles: ["redis"]
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    volumes:
      - "redis:/data"

  backend:
    <<: *default-app
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_BACKEND_CPUS:-0}"
          memory: "${DOCKER_BACKEND_MEMORY:-0}"
    profiles: ["backend"]
    command: "envconsul -consul-addr consul:8500 -upcase -sanitize -prefix flask-app gunicorn -c python:app.gunicorn wsgi:app"

  consul:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_CONSUL_CPUS:-0}"
          memory: "${DOCKER_CONSUL_MEMORY:-0}"
    profiles: ["consul"]
    image: "hashicorp/consul:1.17.3"
    command: "consul agent -dev -client 0.0.0.0"
    # ports:
    #   - "8500:8500"

volumes:
  postgres: {}
  mediafiles: {}
  redis: {}
